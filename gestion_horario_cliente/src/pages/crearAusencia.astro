---
import Layout from '../layouts/Layout.astro';
---
<Layout title="crearAusencia"/>
<!--Tipo de falta (tiempo que ocupa) -->
<div class="flex flex-col md:flex-row justify-center space-y-2 md:space-x-2 md:space-y-0">
    <button id="unas-horas-btn" type="button" class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-500 dark:focus:ring-blue-800">Unas horas</button>
  
    <button id="todo-el-dia-btn" type="button" class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-500 dark:focus:ring-blue-800">Todo el día</button>
  
    <button id="varios-dias-btn" type="button" class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-500 dark:focus:ring-blue-800">Varios días</button>
</div>

<!--Menú de horas y calendario 1 fecha-->
<div id="unas-horas-container" style="display: none;" class="flex flex-col md:flex-row justify-center items-center space-y-4 md:space-y-0 md:space-x-4">
    <div id="rango-horas">
        <h3 class="mb-4 font-semibold text-gray-900 dark:text-white">Seleccione la hora u horas en las que no estará en el centro</h3>
        <ul id="checkboxList" class="w-48 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg dark:bg-gray-700 dark:border-gray-600 dark:text-white">
        </ul>
    </div>
    <div id="calendar1" class="card p-4 bg-white shadow-lg rounded-lg">
        <calendar-date months="1" 
          min-date="{minDate.toISOString()}" 
          max-date="{maxDate.toISOString()}"
          class="space-y-1"
        >
          <svg
            aria-label="Previous"
            slot="previous"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            class="w-6 h-6 text-gray-600 hover:text-gray-900 cursor-pointer"
          >
            <path d="M15.75 19.5 8.25 12l7.5-7.5"></path>
          </svg>
          <svg
            aria-label="Next"
            slot="next"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            class="w-6 h-6 text-gray-600 hover:text-gray-900 cursor-pointer"
          >
            <path d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
          </svg>
          <div class="grid grid-cols-1 gap-4">
            <calendar-month class="border rounded-lg p-4 shadow-md"></calendar-month>
          </div>
        </calendar-date>
    </div>
</div>
<!-- Calendario para un día completo -->
<div id="todo-el-dia-container" style="display: none;" class="flex justify-center">
    <div id="calendar3" class="card p-4 bg-white shadow-lg rounded-lg">
        <calendar-date months="1" 
          min-date="{minDate.toISOString()}" 
          max-date="{maxDate.toISOString()}"
          class="space-y-1"
        >
          <svg
            aria-label="Previous"
            slot="previous"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            class="w-6 h-6 text-gray-600 hover:text-gray-900 cursor-pointer"
          >
            <path d="M15.75 19.5 8.25 12l7.5-7.5"></path>
          </svg>
          <svg
            aria-label="Next"
            slot="next"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            class="w-6 h-6 text-gray-600 hover:text-gray-900 cursor-pointer"
          >
            <path d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
          </svg>
          <div class="grid grid-cols-1 gap-4">
            <calendar-month class="border rounded-lg p-4 shadow-md"></calendar-month>
          </div>
        </calendar-date>
    </div>
</div>
<!--Calendario para varios días completos -->
<div id="varios-dias-container" style="display: none;" class="flex justify-center">
    <div id="calendar2" class="card p-4 bg-white shadow-lg rounded-lg">
        <calendar-range months="1" 
          min-date="{minDate.toISOString()}" 
          max-date="{maxDate.toISOString()}"
          class="space-y-1"
        >
          <svg
            aria-label="Previous"
            slot="previous"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            class="w-6 h-6 text-gray-600 hover:text-gray-900 cursor-pointer"
          >
            <path d="M15.75 19.5 8.25 12l7.5-7.5"></path>
          </svg>
          <svg
            aria-label="Next"
            slot="next"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            class="w-6 h-6 text-gray-600 hover:text-gray-900 cursor-pointer"
          >
            <path d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
          </svg>
          <div class="grid grid-cols-1 gap-4">
            <calendar-month class="border rounded-lg p-4 shadow-md"></calendar-month>
          </div>
        </calendar-range>
    </div>
</div>
<!--Botón envío datos -->
<div id="crear-ausencia-container" style="display: none;" class="flex justify-center mt-4">
    <button id="crear-ausencia-btn" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Crear Ausencia</button>
</div>

<script>
  import "cally";

  document.addEventListener('DOMContentLoaded', () => {
    const checkboxList = document.getElementById('checkboxList');
    const unasHorasContainer = document.getElementById('unas-horas-container');
    const todoElDiaContainer = document.getElementById('todo-el-dia-container');
    const variosDiasContainer = document.getElementById('varios-dias-container');
    const crearAusenciaContainer = document.getElementById('crear-ausencia-container');
    const crearAusenciaBtn = document.getElementById('crear-ausencia-btn');

    const unasHorasBtn = document.getElementById('unas-horas-btn');
    const todoElDiaBtn = document.getElementById('todo-el-dia-btn');
    const variosDiasBtn = document.getElementById('varios-dias-btn');

    const token = localStorage.getItem('access_token'); //Acceso al token de usuario

    if (!token) {
      console.error('No se encontró el token de autenticación.');
      alert('No se encontró el token de autenticación. Por favor, inicie sesión.');
      return;
    }

    let selectedDate = false;
    let selectedHour = false;
    //Muestro según qué elemento del html según el botón seleccionado
    const checkToShowCrearAusencia = () => {
      if (selectedDate && selectedHour) {
        crearAusenciaContainer.style.display = 'flex';
      } else {
        crearAusenciaContainer.style.display = 'none';
      }
    };

    unasHorasBtn.addEventListener('click', () => {
      unasHorasContainer.style.display = 'flex';
      todoElDiaContainer.style.display = 'none';
      variosDiasContainer.style.display = 'none';
      selectedDate = false;
      selectedHour = false;
      checkToShowCrearAusencia();
    });

    todoElDiaBtn.addEventListener('click', () => {
      unasHorasContainer.style.display = 'none';
      todoElDiaContainer.style.display = 'flex';
      variosDiasContainer.style.display = 'none';
      selectedDate = false;
      selectedHour = true; // Necesita seleccionar la fecha
      checkToShowCrearAusencia();
    });

    variosDiasBtn.addEventListener('click', () => {
      unasHorasContainer.style.display = 'none';
      todoElDiaContainer.style.display = 'none';
      variosDiasContainer.style.display = 'flex';
      selectedDate = false;
      selectedHour = true; // Necesita seleccionar el rango de fechas
      checkToShowCrearAusencia();
    });

    checkboxList.addEventListener('change', () => {
      selectedHour = checkboxList.querySelector('input:checked') !== null;
      checkToShowCrearAusencia();
    });

    document.getElementById('calendar1').addEventListener('click', () => {
      selectedDate = true;
      checkToShowCrearAusencia();
    });

    document.getElementById('calendar3').addEventListener('click', () => {
      selectedDate = true;
      checkToShowCrearAusencia();
    });

    document.getElementById('calendar2').addEventListener('click', () => {
      selectedDate = true;
      checkToShowCrearAusencia();
    });

    fetch('http://localhost:8080/api/franjas', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`, 
        'Content-Type': 'application/json'
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`Network response was not ok: ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      const franjas = data; 
      franjas.forEach(franja => {
        const listItem = document.createElement('li');
        listItem.classList.add('w-full', 'border-b', 'border-gray-200', 'rounded-t-lg', 'dark:border-gray-600');
        
        const itemDiv = document.createElement('div');
        itemDiv.classList.add('flex', 'items-center', 'ps-3');
        
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.classList.add('w-4', 'h-4', 'text-blue-600', 'bg-gray-100', 'border-gray-300', 'rounded', 'focus:ring-blue-500', 'dark:focus:ring-blue-600', 'dark:ring-offset-gray-700', 'dark:focus:ring-offset-gray-700', 'focus:ring-2', 'dark:bg-gray-600', 'dark:border-gray-500');
        checkbox.id = `checkbox-item-${franja.id}`;
        checkbox.value = franja.hora_desde;

        const label = document.createElement('label');
        label.classList.add('w-full', 'py-3', 'ms-2', 'text-sm', 'font-medium', 'text-gray-900', 'dark:text-gray-300');
        label.htmlFor = `checkbox-item-${franja.id}`;
        label.textContent = `${franja.hora_desde}`; 

        itemDiv.appendChild(checkbox);
        itemDiv.appendChild(label);
        listItem.appendChild(itemDiv);
        checkboxList.appendChild(listItem);
      });
    })
    .catch(error => {
      console.error('Error fetching data:', error);
      alert(`Error fetching data: ${error.message}`);
    });

    // Manejar el evento click del botón Crear Ausencia
    crearAusenciaBtn.addEventListener('click', () => {
      const checkedHours = Array.from(checkboxList.querySelectorAll('input:checked')).map(input => input.value);
      const fecha = selectedDate; // Obtener la fecha seleccionada
      const horarioId = 1; // Asignar el ID del horario correspondiente, esto debería ser dinámico
      const userId = 1; // Asignar el ID del usuario correspondiente, esto debería ser dinámico
      
      // Crear los datos para la solicitud POST
      const ausenciaData = {
        user_id: userId,
        horario_id: horarioId,
        fecha: fecha, // Formatear la fecha correctamente
        hora: checkedHours.join(', '), // Formatear las horas seleccionadas
      };

      // Enviar la solicitud POST
      fetch('http://localhost:8080/api/ausencias', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`, 
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(ausenciaData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Network response was not ok: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Ausencia creada:', data);
        alert('Ausencia creada correctamente');
      })
      .catch(error => {
        console.error('Error creating ausencia:', error);
        alert(`Error creating ausencia: ${error.message}`);
      });
    });
  });
</script>

---
import Navbar from '../components/navbar.astro';
import Layout from '../layouts/Layout.astro';
import EditButton from '../components/editButton.astro';
import DeleteButton from '../components/deleteButton.astro';


const user = [
  { id: 1, name: 'Profesor A' },
  { id: 2, name: 'Profesor B' },
  { id: 3, name: 'Profesor C' }
];
---

<Layout title='Plantilla'>
  <Navbar />
  <form id="uploadForm">
    <label for="file">Adjunte el documento .xml:</label>
    <input type="file" id="file" name="xml">
    <button type="button" onclick="handleFileUpload()">Cargar Archivo</button>
</form>
  <div style="display: flex; align-items: center;">
    <select id="profesorSelect" name="user" style="margin-right: 10px;">
      <option value="">Escoja un profesor</option>
      {/* Suponemos que 'user' es una prop proporcionada al componente */}
      {user.map(user => (
        <option value={user.id}>{user.name}</option>
      ))}
    </select>
    <EditButton id="editButton" style="display: none;" />
    <DeleteButton id="deleteButton" style="display: none;" />
    
  </div>
  <button id="verFaltas" style="display: none;">Ver Faltas</button>
  <button id="verHorario" style="display: none;">Ver Horario</button>
  
  <!-- Faltas -->
  <div id="tablaFaltas" style="display: none;">
    <table border="1">
      <thead>
        <tr>
          <th>Día</th>
          <th>Hora</th>
          <th>Clase</th>
          <th>Descripción</th>
        </tr>
      </thead>
      <tbody>
        <!-- Necesito los datos para poder hacer las celdas -->
      </tbody>
    </table>
  </div>

  <!-- Horario -->
  <div id="tablaHorario" style="display: none;">
    <table border="1">
      <thead>
        <tr>
          <th>Hora</th>
          <th>Asignatura</th>
          <th>Edificio-Aula</th>
          <th>Grupo</th>
        </tr>
      </thead>
      <tbody>
        <!-- Necesito los datos para poder hacer las celdas -->
      </tbody>
    </table>
  </div>

  <script type="module">
    async function handleFileUpload() {
    const fileInput = document.getElementById('file');
    const file = fileInput.files[0];
    if (!file) {
        alert('Por favor, seleccione un archivo para cargar.');
        return;
    }

    const formData = new FormData();
    formData.append('xml', file);

    try {
        const response = await fetch('http://localhost:8080/api/upload-xml', {
            method: 'POST',
            body: formData,
        });

        if (!response.ok) {
            throw new Error('Error en la respuesta del servidor: ' + response.statusText);
        }

        const result = await response.json();
        alert('Archivo procesado: ' + result.message);
    } catch (error) {
        console.error('Error uploading file:', error);
        alert('Error al procesar el archivo: ' + error.message);
    }
}
    const profesorSelect = document.getElementById('profesorSelect');
    const verFaltas = document.getElementById('verFaltas');
    const verHorario = document.getElementById('verHorario');
    const tablaFaltas = document.getElementById('tablaFaltas');
    const tablaHorario = document.getElementById('tablaHorario');
    const editButton = document.getElementById('editButton');
    const deleteButton = document.getElementById('deleteButton');
  
    function updateVisibility() {
      const isSelected = profesorSelect.value !== "";
      verFaltas.style.display = isSelected ? 'block' : 'none';
      verHorario.style.display = isSelected ? 'block' : 'none';
      editButton.style.display = isSelected ? 'inline-block' : 'none';
      deleteButton.style.display = isSelected ? 'inline-block' : 'none';
      tablaFaltas.style.display = 'none';
      tablaHorario.style.display = 'none';
    }
  
    profesorSelect.addEventListener('change', updateVisibility);
    window.onload = updateVisibility;
  
    verFaltas.addEventListener('click', () => {
      tablaFaltas.style.display = 'block';
      tablaHorario.style.display = 'none';
    });
  
    verHorario.addEventListener('click', () => {
      tablaHorario.style.display = 'block';
      tablaFaltas.style.display = 'none';
    });
  </script>
  
  
</Layout>
<style>
    button { color:aliceblue}
    label { color:aliceblue}
    input { color:aliceblue}
</style>